options {
    STATIC = false;
    IGNORE_CASE = true;
}

PARSER_BEGIN(Parser)

package org.polypheny.cql.parser;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;

import org.polypheny.cql.cql2rel.Index;
import org.polypheny.cql.exception.UnexpectedIndexFormatException;
import org.polypheny.cql.exception.UnknownIndexException;

public class Parser {

    private CqlQuery cqlQuery = null;
    private String databaseName;

    public Parser( String cql, String databaseName ) {
        this( new BufferedReader( new StringReader( cql ) ) );
        this.databaseName = databaseName;
    }

}

PARSER_END(Parser)

TOKEN : { < SORT_BY : "sortby" > }

<DEFAULT> SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

TOKEN : { < BOOLEAN_AND : "and" | "\"and\"" > }
TOKEN : { < BOOLEAN_OR : "or" | "\"or\"" > }
TOKEN : { < BOOLEAN_NOT : "not" | "\"not\"" > }
TOKEN : { < BOOLEAN_PROX : "prox" | "\"prox\"" > }

TOKEN : { < COMPARATOR_SERVER_CHOICE : "=" > }
TOKEN : { < COMPARATOR_EQUALS : "==" > }
TOKEN : { < COMPARATOR_NOT_EQUALS : "<>" > }
TOKEN : { < COMPARATOR_GREATER_THAN : ">" > }
TOKEN : { < COMPARATOR_LESS_THAN : "<" > }
TOKEN : { < COMPARATOR_GREATER_THAN_OR_EQUALS : ">=" > }
TOKEN : { < COMPARATOR_LESS_THAN_OR_EQUALS : "<=" > }

TOKEN : { < STRING_WITHOUT_DOUBLE_QUOTES : ( ~[ " ", "\t", "\n", "\r", "\f", "(", ")", "\"", "=", "<", ">", "/" ] )+ > }
TOKEN : {
    < STRING_WITH_DOUBLE_QUOTES :
        "\""
        (
             "\\" ~[]
        |
            ~["\"","\\"]
        )*
        "\"" >
}


CqlQuery parse() :
{
    QueryNode tableOperations = null;
    QueryNode filters = null;
    ArrayList<SortSpecification> sortSpecs = null;
    HashMap<String, Index> indexMapping = new HashMap<String, Index>();
}
{
    {
        if ( cqlQuery != null ) {
            return cqlQuery;
        }
    }

        filters = CQL_QUERY( indexMapping )

//    (
//        LOOKAHEAD( 3 )
//        tableOperations = SEARCH_TERM_QUERY( indexMapping )
//    |
//        LOOKAHEAD( 2 )
//        filters = CQL_QUERY( indexMapping )
//    |
//        tableOperations = SEARCH_TERM_QUERY( indexMapping )
//        < BOOLEAN_AND >
//        filters = CQL_QUERY( indexMapping )
//    )
    [
        < SORT_BY >
        sortSpecs = SORT_SPECIFICATION_LIST( indexMapping )
    ]
    < EOF >
    {
        cqlQuery = new CqlQuery( tableOperations, filters, sortSpecs, indexMapping );
        return cqlQuery;
    }
}

QueryNode CQL_QUERY( HashMap<String, Index> indexMapping ) :
{
    QueryNode root = null;
}
{
    root = SCOPED_CLAUSE( indexMapping )
    { return root; }
}

QueryNode SEARCH_TERM_QUERY( HashMap<String, Index> indexMapping ) :
{
    Token identifier;
    BooleanGroup booleanGroup = null;
    QueryNode root = null;
}
{
    identifier = < STRING_WITHOUT_DOUBLE_QUOTES >
    {
        try {
            Index index = Index.createIndex( identifier.image, databaseName );
            indexMapping.put( identifier.image, index );
        } catch ( UnexpectedIndexFormatException e ) {
            throw new ParseException( e.getMessage() );
        } catch ( UnknownIndexException e ) {
            throw new ParseException( e.getMessage() );
        }
        root = new QueryNode(
                SearchClause.createSearchTermOnlySearchClause( identifier.image )
        );
    }
    (
        LOOKAHEAD( 2 )
        booleanGroup = BOOLEAN_GROUP()
        identifier = < STRING_WITHOUT_DOUBLE_QUOTES >
        {
            if ( booleanGroup.booleanOperator != BooleanOperator.AND &&
                 booleanGroup.booleanOperator != BooleanOperator.OR ) {
                throw new ParseException( "Illegal use of boolean operator " + booleanGroup.booleanOperator.name()
                 + ". Table operation's search terms should be separated by only AND or OR." );
            }
            try {
                Index index = Index.createIndex( identifier.image, databaseName );
                if ( index.isTableIndex() ) {
                    indexMapping.put( identifier.image, index );
                } else {
                    throw new ParseException( "Index of Table type used where index of Column type was expected: " + identifier.image );
                }
            } catch ( UnexpectedIndexFormatException e ) {
                throw new ParseException( e.getMessage() );
            } catch ( UnknownIndexException e ) {
                throw new ParseException( e.getMessage() );
            }
            root = new QueryNode(
                    root,
                    booleanGroup,
                    new QueryNode(
                            SearchClause.createSearchTermOnlySearchClause( identifier.image )
            ) );
        }
    )*
    {
        return root;
    }
}

QueryNode SCOPED_CLAUSE( HashMap<String, Index> indexMapping ) :
{
    QueryNode leftSearchClause = null;
    BooleanGroup booleanGroup = null;
    QueryNode rightSearchClause = null;
}
{
    leftSearchClause = SEARCH_CLAUSE( indexMapping )
    (
        booleanGroup = BOOLEAN_GROUP()
        rightSearchClause = SEARCH_CLAUSE( indexMapping )
        {
            leftSearchClause = new QueryNode( leftSearchClause, booleanGroup, rightSearchClause );
        }
    )*
    { return leftSearchClause; }
}

QueryNode SEARCH_CLAUSE( HashMap<String, Index> indexMapping ) :
{
    QueryNode queryNode = null;
    SearchClause searchClause = null;
    Token indexToken = null;
    Relation relation = null;
    String searchTerm = null;
}
{
    (
        "("
        queryNode = CQL_QUERY( indexMapping )
        ")"
    |
        indexToken = < STRING_WITHOUT_DOUBLE_QUOTES >
        relation = RELATION()
        searchTerm = IDENTIFIER()
        {
            String indexStr = indexToken.image;
            try {
                Index index;
                if ( !indexMapping.containsKey( indexStr ) ) {
                    index = Index.createIndex( indexStr, databaseName );
                    if ( index.isColumnIndex() ) {
                        indexMapping.put( indexStr, index );
                    } else {
                        throw new ParseException( "Index of Table type used where index of Column type was expected: " + indexStr );
                    }
                    index = Index.createIndex( index.schemaName + "." + index.tableName, databaseName );
                    indexMapping.put( index.fullyQualifiedName, index );
                }
            } catch( UnexpectedIndexFormatException e ) {
                throw new ParseException( e.getMessage() );
            } catch ( UnknownIndexException e ) {
                throw new ParseException( e.getMessage() );
            }

            try {
                String possibleIndexStr = searchTerm.trim();
                Index index = indexMapping.get( possibleIndexStr );
                if ( index == null ) {
                    index = Index.createIndex( possibleIndexStr, databaseName );
                    if ( index.isColumnIndex() ) {
                        searchClause = SearchClause.createColumnFilterSearchClause( indexStr, relation, possibleIndexStr );
                        indexMapping.put( possibleIndexStr, index );
                        index = Index.createIndex( index.schemaName + "." + index.tableName, databaseName );
                        indexMapping.put( index.fullyQualifiedName, index );
                    }
                }
            } catch( UnexpectedIndexFormatException e) {
                // Do Nothing
            } catch ( UnknownIndexException e ) {
                // Do Nothing
            }

            if ( searchClause == null ) {
                searchClause = SearchClause.createLiteralFilterSearchClause( indexStr, relation, searchTerm );
            }
            queryNode = new QueryNode( searchClause );
        }
    )
    {
        return queryNode;
    }
}

ArrayList<SortSpecification> SORT_SPECIFICATION_LIST( HashMap<String, Index> indexMapping ) :
{
    ArrayList<SortSpecification> sortSpecs = new ArrayList<SortSpecification>();
    SortSpecification sortSpec = null;
}
{
    sortSpec = SORT_SPECIFICATION()
    {
        sortSpecs.add( sortSpec );
        try {
            if ( indexMapping.containsKey( sortSpec.index ) ) {
                Index index = Index.createIndex( sortSpec.index, databaseName );
                indexMapping.put( sortSpec.index, index );
            }
        } catch( UnexpectedIndexFormatException e ) {
            throw new ParseException( e.getMessage() );
        } catch( UnknownIndexException e ) {
            throw new ParseException( e.getMessage() );
        }
    }
    (
        sortSpec = SORT_SPECIFICATION()
        {
            sortSpecs.add( sortSpec );
            try {
                if ( indexMapping.containsKey( sortSpec.index ) ) {
                    Index index = Index.createIndex( sortSpec.index, databaseName );
                    indexMapping.put( sortSpec.index, index );
                }
            } catch( UnexpectedIndexFormatException e ) {
                throw new ParseException( e.getMessage() );
            } catch ( UnknownIndexException e ) {
                throw new ParseException( e.getMessage() );
            }
        }
    )*
    { return sortSpecs; }
}

SortSpecification SORT_SPECIFICATION() :
{
    SortSpecification sortSpec = null;
    String indexStr = null;
    ArrayList<Modifier> modifiers = null;
}
{
    indexStr = IDENTIFIER()
    [
        modifiers = MODIFIER_LIST()
        { sortSpec = new SortSpecification( indexStr, modifiers ); }
    ]
    {
        if ( sortSpec == null ) {
            sortSpec = new SortSpecification( indexStr );
        }

        return sortSpec;
    }
}

BooleanGroup BOOLEAN_GROUP() :
{
    BooleanGroup booleanGroup = null;
    BooleanOperator booleanOperator = null;
    ArrayList<Modifier> modifiers = null;
}
{
    booleanOperator = BOOLEAN_OPERATOR()
    [
        modifiers = MODIFIER_LIST()
    ]
    {
        if ( modifiers == null ) {
            booleanGroup = new BooleanGroup( booleanOperator );
        } else {
            booleanGroup = new BooleanGroup( booleanOperator, modifiers );
        }
        return booleanGroup;
    }
}

Relation RELATION() :
{
    Relation relation = null;
    Comparator comparator = null;
    ArrayList<Modifier> modifiers = null;
}
{
    comparator = COMPARATOR()
    [
        modifiers = MODIFIER_LIST()
    ]
    {
        if ( modifiers == null ) {
            relation = new Relation( comparator );
        } else {
            relation = new Relation( comparator, modifiers );
        }
        return relation;
    }
}

ArrayList<Modifier> MODIFIER_LIST() :
{
    ArrayList<Modifier> modifiers = new ArrayList<Modifier>();
    Modifier modifier = null;
}
{
    modifier = MODIFIER()
    { modifiers.add( modifier ); }
    (
        modifier = MODIFIER()
        { modifiers.add( modifier ); }
    )*
    {
        return modifiers;
    }
}

Modifier MODIFIER() :
{
    Modifier modifier = null;
    String modifierName = null;
    String modifierValue = "";
    Comparator comparator = new Comparator( ComparatorSymbol.SERVER_CHOICE );
}
{
    "/"
    modifierName = IDENTIFIER()
    [
        LOOKAHEAD( 2 )
        comparator = COMPARATOR()
        modifierValue = IDENTIFIER()
    ]
    {
        modifier = new Modifier( modifierName, comparator, modifierValue );
        return modifier;
    }
}

String IDENTIFIER() :
{
    Token t = null;
    String identifier = null;
}
{
    (
        t = < STRING_WITHOUT_DOUBLE_QUOTES >
        {
            identifier = t.image;
        }
    |
        t = < STRING_WITH_DOUBLE_QUOTES >
        {
            String str = t.image;
            str = str.substring( 1, str.length() - 1 );
            str = str.replace( "\\\"", "\"" );
            identifier = str;
        }
    )
    { return identifier; }
}

BooleanOperator BOOLEAN_OPERATOR() :
{
    BooleanOperator booleanOperator = null;
}
{
    (
        < BOOLEAN_AND >
        { booleanOperator = BooleanOperator.AND; }
    |
        < BOOLEAN_OR >
        { booleanOperator = BooleanOperator.OR; }
    |
        < BOOLEAN_NOT >
        { booleanOperator = BooleanOperator.NOT; }
    |
        < BOOLEAN_PROX >
        { booleanOperator = BooleanOperator.PROX; }
    )
    {
        return booleanOperator;
    }
}

Comparator COMPARATOR() :
{
    Comparator comparator = null;
    String named_comparator = null;
}
{
    (
        < COMPARATOR_SERVER_CHOICE >
        { comparator = new Comparator( ComparatorSymbol.SERVER_CHOICE ); }
    |
        < COMPARATOR_EQUALS >
        { comparator = new Comparator( ComparatorSymbol.EQUALS ); }
    |
        < COMPARATOR_NOT_EQUALS >
        { comparator = new Comparator( ComparatorSymbol.NOT_EQUALS ); }
    |
        < COMPARATOR_GREATER_THAN >
        { comparator = new Comparator( ComparatorSymbol.GREATER_THAN ); }
    |
        < COMPARATOR_LESS_THAN >
        { comparator = new Comparator( ComparatorSymbol.LESS_THAN ); }
    |
        < COMPARATOR_GREATER_THAN_OR_EQUALS >
        { comparator = new Comparator( ComparatorSymbol.GREATER_THAN_OR_EQUALS ); }
    |
        < COMPARATOR_LESS_THAN_OR_EQUALS >
        { comparator = new Comparator( ComparatorSymbol.LESS_THAN_OR_EQUALS ); }
    |
        named_comparator = IDENTIFIER()
        { comparator = new Comparator( named_comparator ); }
    )
    {
        return comparator;
    }
}
